pipeline {
    agent any
    
    environment {
        CLUSTER_NAME = "amine-cluster"
        REGION = "us-east-1"
        NAMESPACE = "python-app"
        APP_NAME = "hello-app"
        SERVICE_NAME = "hello-app-service"
    }
    
    stages {
        stage('Configure kubectl') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh "aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${REGION}"
                }
            }
        }
        
        stage('Deploy App') {
            steps {
                script {
                    // Create or update deployment
                    sh """
                    cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APP_NAME}
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${APP_NAME}
  template:
    metadata:
      labels:
        app: ${APP_NAME}
    spec:
      containers:
      - name: ${APP_NAME}
        image: nginx:latest
        ports:
        - containerPort: 80
EOF
                    """
                    
                    // Create or update service
                    sh """
                    cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
spec:
  selector:
    app: ${APP_NAME}
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
EOF
                    """
                }
            }
        }
        
        stage('Reveal APP URL') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        // Wait for the LoadBalancer to be created and get its DNS name
                        def lbDnsName = ""
                        def maxAttempts = 30
                        def attempt = 1
                        while (lbDnsName == "" && attempt <= maxAttempts) {
                            echo "Attempt ${attempt} to get Load Balancer DNS name..."
                            lbDnsName = sh(script: "aws elb describe-load-balancers --region ${REGION} | grep DNSName | cut -d'\"' -f4 | grep ${NAMESPACE}", returnStdout: true).trim()
                            if (lbDnsName == "") {
                                sleep(10)
                                attempt++
                            }
                        }
                        
                        if (lbDnsName != "") {
                            echo "Application is accessible at: http://${lbDnsName}"
                        } else {
                            error "Failed to retrieve Load Balancer DNS name after ${maxAttempts} attempts"
                        }
                    }
                }
            }
        }
        
        stage('Customize App') {
            steps {
                script {
                    // Modify the default nginx page
                    sh """
                    kubectl exec -it -n ${NAMESPACE} \$(kubectl get pod -n ${NAMESPACE} -l app=${APP_NAME} -o jsonpath="{.items[0].metadata.name}") -- /bin/sh -c "echo '<h1>Hello Amine Elhasbi</h1>' > /usr/share/nginx/html/index.html"
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo "Application deployed successfully. Check the console output for the URL."
        }
        failure {
            echo "Deployment failed. Please check the logs for details."
        }
    }
}
