pipeline {
    agent any
    
    environment {
        CLUSTER_NAME = 'python-cluster'
        REGION = 'us-east-1'
        NAMESPACE = 'hello-app'
        PATH = "/var/jenkins_home/.local/bin:$PATH"
        AWS_CLI_DIR = "/var/jenkins_home/.local/aws-cli/v2/current/bin"
    }
    
    stages {
        stage('Verify Tools') {
            steps {
                sh '''
                    # Verify AWS CLI
                    echo "Verifying AWS CLI..."
                    if command -v aws &> /dev/null; then
                        echo "AWS CLI version:"
                        $AWS_CLI_DIR/aws --version
                    else
                        echo "AWS CLI not found in $AWS_CLI_DIR"
                    fi
                    
                    # Install kubectl if not present
                    if ! command -v kubectl &> /dev/null; then
                        echo "Installing kubectl..."
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        mv kubectl /var/jenkins_home/.local/bin/
                    else
                        echo "kubectl is already installed."
                    fi
                    echo "kubectl version:"
                    kubectl version --client || echo "Failed to retrieve kubectl version."
                    
                    # Install eksctl if not present
                    if ! command -v eksctl &> /dev/null; then
                        echo "Installing eksctl..."
                        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                        mv /tmp/eksctl /var/jenkins_home/.local/bin/
                    else
                        echo "eksctl is already installed."
                    fi
                    echo "eksctl version:"
                    eksctl version || echo "Failed to retrieve eksctl version."
                    
                    # Print PATH for debugging
                    echo "Current PATH: $PATH"
                    
                    # Verify tools in PATH
                    echo "Verifying installed tools in PATH..."
                    echo "AWS CLI: $(command -v aws || echo 'Not found')"
                    echo "kubectl: $(command -v kubectl || echo 'Not found')"
                    echo "eksctl: $(command -v eksctl || echo 'Not found')"
                '''
            }
        }
        
        stage('Create EKS Cluster') {
            steps {
                withCredentials([[ 
                    $class: 'AmazonWebServicesCredentialsBinding', 
                    credentialsId: "awscredss", 
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY' 
                ]]) {
                    sh '''
                        echo "Verifying AWS credentials..."
                        echo "AWS_ACCESS_KEY_ID is set: $AWS_ACCESS_KEY_ID"
                        echo "AWS_SECRET_ACCESS_KEY is set: $AWS_SECRET_ACCESS_KEY"
                        
                        echo "Creating EKS cluster..."
                        eksctl create cluster \
                          --name $CLUSTER_NAME \
                          --region $REGION \
                          --nodegroup-name eks-node-group \
                          --nodes 2 \
                          --node-type t3.small \
                          --with-oidc \
                          --managed
                    '''
                }
            }
        }
        
        stage('Verify EKS Cluster') {
            steps {
                withCredentials([[ 
                    $class: 'AmazonWebServicesCredentialsBinding', 
                    credentialsId: "awscredss", 
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY' 
                ]]) {
                    sh '''
                        echo "Verifying EKS cluster..."
                        aws eks --region $REGION update-kubeconfig --name $CLUSTER_NAME
                        kubectl get svc
                    '''
                }
            }
        }
        
        stage('Delete EKS Cluster') {
            steps {
                withCredentials([[ 
                    $class: 'AmazonWebServicesCredentialsBinding', 
                    credentialsId: "awscredss", 
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY' 
                ]]) {
                    sh '''
                        echo "Deleting EKS cluster..."
                        eksctl delete cluster --name $CLUSTER_NAME --region $REGION
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            // Add cleanup steps if necessary
        }
    }
}
