pipeline {
    agent any
    
    environment {
        CLUSTER_NAME = 'python-cluster'
        REGION = 'us-east-1'
        NAMESPACE = 'hello-app'
    }
    
    stages {
        stage('Create Cluster') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh "eksctl create cluster --name ${CLUSTER_NAME} --region ${REGION} --nodes-min=1"
                }
            }
        }
        
        stage('Update Kubeconfig') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh "aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${REGION}"
                }
            }
        }
        
        stage('Create Namespace') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh "kubectl create namespace ${NAMESPACE}"
                }
            }
        }
        
        stage('Deploy App') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh """
                    kubectl create deployment hello-world --image=nginx -n ${NAMESPACE}
                    kubectl expose deployment hello-world --type=LoadBalancer --port=80 -n ${NAMESPACE}
                    """
                }
            }
        }
        
        stage('Retrieve Application URL') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        // Wait for the LoadBalancer to get an external IP
                        sh "kubectl wait --for=condition=available --timeout=300s deployment/hello-world -n ${NAMESPACE}"
                        
                        // Get the LoadBalancer URL
                        def loadBalancerUrl = sh(
                            script: "kubectl get service hello-world -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'",
                            returnStdout: true
                        ).trim()

                        // Save the URL to a file
                        writeFile file: 'application-url.txt', text: "http://${loadBalancerUrl}"
                        
                        echo "Application URL: http://${loadBalancerUrl}"
                        echo "You can access the Hello World app using the above URL once it's fully propagated (may take a few minutes)."
                        
                        // Archive the URL file
                        archiveArtifacts artifacts: 'application-url.txt', fingerprint: true
                    }
                }
            }
        }
    }
}
