pipeline {
    agent any
    
    environment {
        CLUSTER_NAME = 'python-cluster'
        REGION = 'us-east-1'
        NAMESPACE = 'hello-app'
        PATH = "/var/jenkins_home/.local/bin:/var/jenkins_home/.local/aws-cli/v2/current/bin:$PATH"
    }
    
    stages {
        stage('Verify Tools') {
            steps {
                sh '''
                    echo "Verifying AWS CLI..."
                    if command -v aws &> /dev/null; then
                        echo "AWS CLI version:"
                        aws --version
                    else
                        echo "AWS CLI not found"
                    fi

                    echo "Verifying kubectl..."
                    if ! command -v kubectl &> /dev/null; then
                        echo "Installing kubectl..."
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        mv kubectl /var/jenkins_home/.local/bin/
                    fi
                    echo "kubectl version:"
                    kubectl version --client

                    echo "Verifying eksctl..."
                    if ! command -v eksctl &> /dev/null; then
                        echo "Installing eksctl..."
                        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                        mv /tmp/eksctl /var/jenkins_home/.local/bin/
                    fi
                    echo "eksctl version:"
                    eksctl version

                    echo "Current PATH: $PATH"
                    echo "Verifying installed tools in PATH..."
                    echo "AWS CLI: $(command -v aws || echo 'Not found')"
                    echo "kubectl: $(command -v kubectl || echo 'Not found')"
                    echo "eksctl: $(command -v eksctl || echo 'Not found')"
                '''
            }
        }
        
        stage('Create EKS Cluster') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh '''
                        echo "Verifying AWS credentials..."
                        echo "AWS_ACCESS_KEY_ID is set: ${AWS_ACCESS_KEY_ID:+true}"
                        echo "AWS_SECRET_ACCESS_KEY is set: ${AWS_SECRET_ACCESS_KEY:+true}"
                        aws sts get-caller-identity

                        echo "Creating EKS cluster..."
                        eksctl create cluster \
                          --name $CLUSTER_NAME \
                          --region $REGION \
                          --nodegroup-name eks-node-group \
                          --nodes 2 \
                          --node-type t3.small \
                          --with-oidc \
                          --managed \
                          --aws-access-key-id $AWS_ACCESS_KEY_ID \
                          --aws-secret-access-key $AWS_SECRET_ACCESS_KEY
                    '''
                }
            }
        }
        
        stage('Verify EKS Cluster') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh '''
                        echo "Verifying EKS cluster..."
                        aws eks --region $REGION update-kubeconfig --name $CLUSTER_NAME
                        kubectl get nodes
                        kubectl get svc
                    '''
                }
            }
        }
        
        stage('Deploy Application') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh '''
                        echo "Deploying application..."
                        kubectl create namespace $NAMESPACE || true
                        kubectl apply -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-world
  namespace: $NAMESPACE
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hello-world
  template:
    metadata:
      labels:
        app: hello-world
    spec:
      containers:
      - name: hello-world
        image: nginx:latest
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: hello-world-service
  namespace: $NAMESPACE
spec:
  type: LoadBalancer
  selector:
    app: hello-world
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
EOF
                        kubectl get pods -n $NAMESPACE
                        kubectl get svc -n $NAMESPACE
                    '''
                }
            }
        }
        
        stage('Retrieve Application URL') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh '''
                        echo "Retrieving application URL..."
                        kubectl wait --for=condition=available --timeout=300s deployment/hello-world -n $NAMESPACE
                        LOAD_BALANCER_IP=$(kubectl get svc hello-world-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                        echo "Application is accessible at: http://$LOAD_BALANCER_IP"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: "awscredss",
                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
                sh '''
                    echo "Deleting EKS cluster..."
                    eksctl delete cluster --name $CLUSTER_NAME --region $REGION
                '''
            }
        }
    }
}
