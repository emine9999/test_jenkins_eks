pipeline {
    agent any
    stages {
        stage('Create Cluster') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh "eksctl create cluster --name python-cluster --region eu-central-1 --nodes-min=3"
                }
            }
        }
        stage('Update Kubeconfig') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh """
                    aws eks update-kubeconfig --name python-cluster
                    """
                }
            }
        }
        stage('Create Namespace') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh "kubectl create namespace python-app"
                }
            }
        }
        stage('Delete Cluster') {
            steps {
                input message: 'Do you want to delete the EKS cluster?', ok: 'Yes'
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "awscredss",
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh "eksctl delete cluster --name python-cluster --region eu-central-1"
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
